'use client';

import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Card, Button, Badge, Form, Spinner, Modal } from 'react-bootstrap';
import { collection, getDocs, addDoc, updateDoc, doc, query, where, orderBy } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import { Referral, ReferralResource, Client, ReferralStatus, ReferralUrgency, ResourceCategory } from '@/types/platform.types';
import { FaPlus, FaEdit, FaEye, FaPhone, FaEnvelope, FaExclamationTriangle } from 'react-icons/fa';

export default function ReferralManagement() {
  const [referrals, setReferrals] = useState<Referral[]>([]);
  const [resources, setResources] = useState<ReferralResource[]>([]);
  const [clients, setClients] = useState<Client[]>([]);
  const [loading, setLoading] = useState(true);
  const [showModal, setShowModal] = useState(false);
  const [editingReferral, setEditingReferral] = useState<Referral | null>(null);
  const [formData, setFormData] = useState<Partial<Referral>>({});
  const [isConnectedToCare360] = useState(true); // Mock connection status

  const getStatusVariant = (status: ReferralStatus) => {
    const variants = {
      [ReferralStatus.PENDING]: 'warning',
      [ReferralStatus.CONTACTED]: 'info', 
      [ReferralStatus.COMPLETED]: 'success',
      [ReferralStatus.CANCELLED]: 'danger'
    };
    return variants[status] || 'info';
  };

  const getUrgencyVariant = (urgency: ReferralUrgency) => {
    const variants = {
      [ReferralUrgency.LOW]: 'info',
      [ReferralUrgency.MEDIUM]: 'warning',
      [ReferralUrgency.HIGH]: 'warning', 
      [ReferralUrgency.URGENT]: 'danger'
    };
    return variants[urgency] || 'info';
  };

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      // Fetch referrals
      const referralsQuery = query(
        collection(db, 'referrals'),
        orderBy('createdAt', 'desc')
      );
      const referralsSnapshot = await getDocs(referralsQuery);
      const referralsData = referralsSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        createdAt: doc.data().createdAt?.toDate(),
        updatedAt: doc.data().updatedAt?.toDate(),
        followUpDate: doc.data().followUpDate?.toDate(),
        completedAt: doc.data().completedAt?.toDate()
      })) as Referral[];

      // Fetch resources
      const resourcesQuery = query(collection(db, 'referralResources'));
      const resourcesSnapshot = await getDocs(resourcesQuery);
      const resourcesData = resourcesSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      })) as ReferralResource[];

      // Fetch clients (limited for HIPAA compliance)
      const clientsQuery = query(collection(db, 'clients'));
      const clientsSnapshot = await getDocs(clientsQuery);
      const clientsData = clientsSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      })) as Client[];

      setReferrals(referralsData);
      setResources(resourcesData);
      setClients(clientsData);
    } catch (error) {
      console.error('Error fetching data:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const referralData = {
        ...formData,
        status: formData.status || ReferralStatus.PENDING,
        followUpDate: formData.followUpDate ? new Date(formData.followUpDate as string) : null,
        updatedAt: new Date()
      };

      if (editingReferral) {
        await updateDoc(doc(db, 'referrals', editingReferral.id), referralData);
      } else {
        await addDoc(collection(db, 'referrals'), {
          ...referralData,
          createdAt: new Date()
        });
      }

      setShowModal(false);
      setEditingReferral(null);
      setFormData({});
      fetchData();
    } catch (error) {
      console.error('Error saving referral:', error);
    }
  };

  const updateReferralStatus = async (referralId: string, status: ReferralStatus) => {
    try {
      const updateData: any = {
        status,
        updatedAt: new Date()
      };

      if (status === ReferralStatus.COMPLETED) {
        updateData.completedAt = new Date();
      }

      await updateDoc(doc(db, 'referrals', referralId), updateData);
      fetchData();
    } catch (error) {
      console.error('Error updating referral status:', error);
    }
  };

  const resetForm = () => {
    setFormData({
      clientId: '',
      resourceId: '',
      urgency: ReferralUrgency.MEDIUM,
      reason: '',
      notes: '',
      followUpDate: ''
    });
  };

  const getResourceByCategory = (category: ResourceCategory) => {
    return resources.filter(resource => resource.category === category);
  };

  if (loading) {
    return (
      <div className="d-flex flex-column align-items-center justify-content-center" style={{ minHeight: '200px' }}>
        <Spinner animation="border" />
        <p className="mt-3 text-muted">Loading referrals...</p>
      </div>
    );
  }

  return (
    <Container fluid className="p-4">
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h2 className="fw-bold">Referral Communications</h2>
          <p className="text-muted">Manage client referrals and resource connections</p>
        </div>
        <Button variant="primary" onClick={() => setShowModal(true)}>
          <FaPlus className="me-2" />
          New Referral
        </Button>
      </div>

      {/* HIPAA Notice */}
      <div className="alert alert-info d-flex align-items-center mb-4">
        <FaExclamationTriangle className="me-2" />
        <strong>HIPAA Protected Communications</strong>
        <span className="ms-2">- All referral communications are encrypted and logged for compliance.</span>
      </div>

      {/* Metrics Cards */}
      <Row className="mb-4 g-3">
        <Col md={3}>
          <Card className="text-center h-100">
            <Card.Body>
              <h2 className="text-warning">{referrals.filter(r => r.status === ReferralStatus.PENDING).length}</h2>
              <p className="mb-0">Pending Referrals</p>
            </Card.Body>
          </Card>
        </Col>
        <Col md={3}>
          <Card className="text-center h-100">
            <Card.Body>
              <h2 className="text-success">{referrals.filter(r => r.status === ReferralStatus.COMPLETED).length}</h2>
              <p className="mb-0">Completed</p>
            </Card.Body>
          </Card>
        </Col>
        <Col md={3}>
          <Card className="text-center h-100">
            <Card.Body>
              <h2 className="text-danger">{referrals.filter(r => r.urgency === ReferralUrgency.URGENT).length}</h2>
              <p className="mb-0">Urgent</p>
            </Card.Body>
          </Card>
        </Col>
        <Col md={3}>
          <Card className="text-center h-100">
            <Card.Body>
              <h2 className="text-info">{resources.filter(r => r.region5Certified).length}</h2>
              <p className="mb-0">Region 5 Resources</p>
            </Card.Body>
          </Card>
        </Col>
      </Row>

      {/* NC C.A.R.E. 360 Integration Status */}
      <Card className="mb-4">
        <Card.Body>
          <h4>NC C.A.R.E. 360 Integration Status</h4>
          <div className="mt-3">
            <Badge bg={isConnectedToCare360 ? 'success' : 'danger'} className="p-2">
              {isConnectedToCare360 ? 'Connected' : 'Disconnected'}
            </Badge>
            <p className="mt-2 mb-0">
              {isConnectedToCare360 
                ? 'Real-time resource matching and referral tracking enabled'
                : 'Manual resource matching - Contact IT for connection support'
              }
            </p>
          </div>
        </Card.Body>
      </Card>

      {/* Referrals Table */}
      <Card>
        <Card.Body>
          <h4 className="mb-4">Active Referrals</h4>
          <div className="table-responsive">
            <table className="table">
              <thead>
                <tr>
                  <th>Client</th>
                  <th>Resource</th>
                  <th>Category</th>
                  <th>Status</th>
                  <th>Urgency</th>
                  <th>Date Created</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {referrals.map((referral) => {
                  const client = clients.find(c => c.id === referral.clientId);
                  const resource = resources.find(r => r.id === referral.resourceId);
                  return (
                    <tr key={referral.id}>
                      <td>
                        {client ? `${client.firstName} ${client.lastName}` : 'Unknown Client'}
                      </td>
                      <td>
                        {resource?.name || 'Unknown Resource'}
                      </td>
                      <td>
                        <Badge bg="info">
                          {resource?.category}
                        </Badge>
                      </td>
                      <td>
                        <Badge bg={getStatusVariant(referral.status)}>
                          {referral.status}
                        </Badge>
                      </td>
                      <td>
                        <Badge bg={getUrgencyVariant(referral.urgency)}>
                          {referral.urgency}
                        </Badge>
                      </td>
                      <td>
                        {referral.createdAt?.toLocaleDateString()}
                      </td>
                      <td>
                        <div className="btn-group">
                          <Button 
                            variant="outline-secondary" 
                            size="sm"
                            onClick={() => {
                              // View referral functionality
                              console.log('View referral:', referral);
                            }}
                          >
                            <FaEye />
                          </Button>
                          <Button 
                            variant="outline-primary" 
                            size="sm"
                            onClick={() => {
                              setEditingReferral(referral);
                              setFormData(referral);
                              setShowModal(true);
                            }}
                          >
                            <FaEdit />
                          </Button>
                        </div>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </Card.Body>
      </Card>

      {/* Add/Edit Referral Modal */}
      <Modal show={showModal} onHide={() => setShowModal(false)} size="lg">
        <Modal.Header closeButton>
          <Modal.Title>{editingReferral ? 'Edit Referral' : 'New Referral'}</Modal.Title>
        </Modal.Header>
        <Form onSubmit={handleSubmit}>
          <Modal.Body>
            <Row className="mb-3">
              <Col md={6}>
                <Form.Group>
                  <Form.Label>Client</Form.Label>
                  <Form.Select
                    value={formData.clientId || ''}
                    onChange={(e) => setFormData({...formData, clientId: e.target.value})}
                    required
                  >
                    <option value="">Select Client</option>
                    {clients.map(client => (
                      <option key={client.id} value={client.id}>
                        {client.firstName} {client.lastName}
                      </option>
                    ))}
                  </Form.Select>
                </Form.Group>
              </Col>
              <Col md={6}>
                <Form.Group>
                  <Form.Label>Resource</Form.Label>
                  <Form.Select
                    value={formData.resourceId || ''}
                    onChange={(e) => setFormData({...formData, resourceId: e.target.value})}
                    required
                  >
                    <option value="">Select Resource</option>
                    {resources.map(resource => (
                      <option key={resource.id} value={resource.id}>
                        {resource.name}
                      </option>
                    ))}
                  </Form.Select>
                </Form.Group>
              </Col>
            </Row>
            
            <Row className="mb-3">
              <Col md={6}>
                <Form.Group>
                  <Form.Label>Category</Form.Label>
                  <Form.Select
                    value={formData.category || ''}
                    onChange={(e) => setFormData({...formData, category: e.target.value})}
                  >
                    <option value="">Select Category</option>
                    <option value={ResourceCategory.HEALTHCARE}>Healthcare</option>
                    <option value={ResourceCategory.HOUSING}>Housing</option>
                    <option value={ResourceCategory.TRANSPORTATION}>Transportation</option>
                    <option value={ResourceCategory.EMPLOYMENT}>Employment</option>
                    <option value={ResourceCategory.EDUCATION}>Education</option>
                    <option value={ResourceCategory.MENTAL_HEALTH}>Mental Health</option>
                    <option value={ResourceCategory.CHILDCARE}>Childcare</option>
                  </Form.Select>
                </Form.Group>
              </Col>
              <Col md={6}>
                <Form.Group>
                  <Form.Label>Status</Form.Label>
                  <Form.Select
                    value={formData.status || ''}
                    onChange={(e) => setFormData({...formData, status: e.target.value as ReferralStatus})}
                    required
                  >
                    <option value={ReferralStatus.PENDING}>Pending</option>
                    <option value={ReferralStatus.CONTACTED}>Contacted</option>
                    <option value={ReferralStatus.COMPLETED}>Completed</option>
                    <option value={ReferralStatus.CANCELLED}>Cancelled</option>
                  </Form.Select>
                </Form.Group>
              </Col>
            </Row>
            
            <Row className="mb-3">
              <Col md={6}>
                <Form.Group>
                  <Form.Label>Urgency</Form.Label>
                  <Form.Select
                    value={formData.urgency || ''}
                    onChange={(e) => setFormData({...formData, urgency: e.target.value as ReferralUrgency})}
                    required
                  >
                    <option value={ReferralUrgency.LOW}>Low</option>
                    <option value={ReferralUrgency.MEDIUM}>Medium</option>
                    <option value={ReferralUrgency.HIGH}>High</option>
                    <option value={ReferralUrgency.URGENT}>Urgent</option>
                  </Form.Select>
                </Form.Group>
              </Col>
              <Col md={6}>
                <Form.Group>
                  <Form.Label>Follow-up Date</Form.Label>
                  <Form.Control
                    type="date"
                    value={formData.followUpDate || ''}
                    onChange={(e) => setFormData({...formData, followUpDate: e.target.value})}
                  />
                </Form.Group>
              </Col>
            </Row>
            
            <Form.Group className="mb-3">
              <Form.Label>Notes</Form.Label>
              <Form.Control
                as="textarea"
                rows={3}
                value={formData.notes || ''}
                onChange={(e) => setFormData({...formData, notes: e.target.value})}
                placeholder="Additional notes about this referral..."
              />
            </Form.Group>
          </Modal.Body>
          <Modal.Footer>
            <Button variant="secondary" onClick={() => setShowModal(false)}>
              Cancel
            </Button>
            <Button variant="primary" type="submit">
              {editingReferral ? 'Update' : 'Create'} Referral
            </Button>
          </Modal.Footer>
        </Form>
      </Modal>
    </Container>
  );
}

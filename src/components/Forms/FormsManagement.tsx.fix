'use client';

import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Card, Button, Spinner, Badge, Form, Modal, Table } from 'react-bootstrap';
import { useAuth } from '@/contexts/AuthContext';
import { FaPlus, FaEdit, FaEye, FaTrash, FaUpload, FaWpforms } from 'react-icons/fa';

interface FormField {
  id: string;
  name: string;
  type: 'text' | 'number' | 'email' | 'date' | 'select' | 'textarea' | 'checkbox' | 'radio';
  label: string;
  required: boolean;
  options?: string[];
  validation?: string;
}

interface CustomForm {
  id: string;
  name: string;
  description: string;
  fields: FormField[];
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
  submissions: number;
  createdBy: string;
}

export default function FormsManagement() {
  const { currentUser } = useAuth();
  const [forms, setForms] = useState<CustomForm[]>([]);
  const [loading, setLoading] = useState(true);
  const [showModal, setShowModal] = useState(false);
  const [modalType, setModalType] = useState<'create' | 'edit' | 'view' | 'upload'>('create');
  const [selectedForm, setSelectedForm] = useState<CustomForm | null>(null);
  const [csvFile, setCsvFile] = useState<File | null>(null);
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    fields: [] as FormField[]
  });

  useEffect(() => {
    fetchForms();
  }, []);

  const fetchForms = async () => {
    try {
      // Check if we're in test mode
      const isTestMode = process.env.NODE_ENV === 'development' && 
                         process.env.NEXT_PUBLIC_BYPASS_AUTH === 'true';

      if (isTestMode) {
        // Mock forms data
        const mockForms: CustomForm[] = [
          {
            id: 'form-1',
            name: 'Patient Intake Form',
            description: 'Initial patient registration and health assessment',
            fields: [
              { id: 'f1', name: 'firstName', type: 'text', label: 'First Name', required: true },
              { id: 'f2', name: 'lastName', type: 'text', label: 'Last Name', required: true },
              { id: 'f3', name: 'email', type: 'email', label: 'Email Address', required: true },
              { id: 'f4', name: 'phone', type: 'text', label: 'Phone Number', required: true },
              { id: 'f5', name: 'birthDate', type: 'date', label: 'Date of Birth', required: true },
              { id: 'f6', name: 'insurance', type: 'select', label: 'Insurance Provider', required: false, options: ['Medicaid', 'Medicare', 'Private', 'Uninsured'] }
            ],
            isActive: true,
            createdAt: new Date('2024-01-15'),
            updatedAt: new Date('2024-01-15'),
            submissions: 45,
            createdBy: currentUser?.uid || 'admin'
          },
          {
            id: 'form-2',
            name: 'Community Health Survey',
            description: 'Quarterly community health needs assessment',
            fields: [
              { id: 'f7', name: 'zipCode', type: 'text', label: 'ZIP Code', required: true },
              { id: 'f8', name: 'householdSize', type: 'number', label: 'Household Size', required: true },
              { id: 'f9', name: 'healthConcerns', type: 'checkbox', label: 'Health Concerns', required: false, options: ['Diabetes', 'Hypertension', 'Mental Health', 'Substance Abuse'] },
              { id: 'f10', name: 'accessBarriers', type: 'textarea', label: 'Healthcare Access Barriers', required: false }
            ],
            isActive: true,
            createdAt: new Date('2024-02-01'),
            updatedAt: new Date('2024-02-01'),
            submissions: 23,
            createdBy: currentUser?.uid || 'admin'
          }
        ];
        setForms(mockForms);
        setLoading(false);
        return;
      }

      // In production, fetch from Firebase
      setForms([]);
    } catch (error) {
      console.error('Error fetching forms:', error);
      setForms([]);
    } finally {
      setLoading(false);
    }
  };

  const handleCreateForm = () => {
    setModalType('create');
    setSelectedForm(null);
    setFormData({ name: '', description: '', fields: [] });
    setShowModal(true);
  };

  const handleEditForm = (form: CustomForm) => {
    setModalType('edit');
    setSelectedForm(form);
    setFormData({
      name: form.name,
      description: form.description,
      fields: form.fields
    });
    setShowModal(true);
  };

  const handleViewForm = (form: CustomForm) => {
    setModalType('view');
    setSelectedForm(form);
    setShowModal(true);
  };

  if (loading) {
    return (
      <Container className="d-flex justify-content-center align-items-center py-5">
        <div className="text-center">
          <Spinner animation="border" className="mb-3" />
          <p className="text-muted">Loading forms...</p>
        </div>
      </Container>
    );
  }

  return (
    <Container className="py-4">
      <Row className="mb-4">
        <Col>
          <div className="d-flex justify-content-between align-items-center">
            <div>
              <h2 className="mb-2">Forms Management</h2>
              <p className="text-muted">Create, manage, and deploy custom forms and surveys for data collection</p>
            </div>
            <div className="d-flex gap-2">
              <Button 
                variant="outline-primary"
                onClick={handleCreateForm}
              >
                <FaUpload className="me-2" /> Upload CSV
              </Button>
              <Button 
                variant="primary"
                onClick={handleCreateForm}
              >
                <FaPlus className="me-2" /> Create Form
              </Button>
            </div>
          </div>
        </Col>
      </Row>

      <div className="alert alert-info mb-4">
        <strong>ðŸ“‹ Form Builder Features:</strong>
        <p className="mb-0">Create forms from scratch, upload CSV files to auto-generate forms, or use the integrated form builder SDK for advanced survey creation.</p>
      </div>

      <Card className="mb-4">
        <Card.Body>
          <h3 className="mb-4">Active Forms ({forms.length})</h3>
          
          {forms.length === 0 ? (
            <div className="text-center py-5">
              <FaWpforms size={48} className="text-muted mb-3" />
              <h4 className="text-muted">No Forms Created Yet</h4>
              <p className="text-muted mb-4">Create your first form or upload a CSV file to get started.</p>
              <Button 
                variant="primary"
                onClick={handleCreateForm}
              >
                <FaPlus className="me-2" /> Create Your First Form
              </Button>
            </div>
          ) : (
            <Table responsive hover>
              <thead>
                <tr>
                  <th>Form Name</th>
                  <th>Description</th>
                  <th>Fields</th>
                  <th>Submissions</th>
                  <th>Status</th>
                  <th>Created</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {forms.map((form) => (
                  <tr key={form.id}>
                    <td><strong>{form.name}</strong></td>
                    <td>{form.description}</td>
                    <td><Badge bg="secondary">{form.fields.length} fields</Badge></td>
                    <td>{form.submissions}</td>
                    <td>
                      <Badge bg={form.isActive ? "success" : "secondary"}>
                        {form.isActive ? 'Active' : 'Inactive'}
                      </Badge>
                    </td>
                    <td>{form.createdAt.toLocaleDateString()}</td>
                    <td>
                      <div className="d-flex gap-2">
                        <Button 
                          variant="outline-secondary" 
                          size="sm"
                          onClick={() => handleViewForm(form)}
                        >
                          <FaEye />
                        </Button>
                        <Button 
                          variant="outline-secondary" 
                          size="sm"
                          onClick={() => handleEditForm(form)}
                        >
                          <FaEdit />
                        </Button>
                        <Button variant="outline-danger" size="sm">
                          <FaTrash />
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </Table>
          )}
        </Card.Body>
      </Card>

      {/* Form Modal */}
      <Modal 
        show={showModal} 
        onHide={() => setShowModal(false)}
        size="lg"
        centered
      >
        <Modal.Header closeButton>
          <Modal.Title>
            {modalType === 'create' && 'Create New Form'}
            {modalType === 'edit' && 'Edit Form'}
            {modalType === 'view' && 'View Form'}
            {modalType === 'upload' && 'Upload CSV File'}
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {modalType === 'view' && selectedForm ? (
            <div>
              <div className="alert alert-info mb-4">
                <strong>Form Preview:</strong> {selectedForm.name}
              </div>
              
              <h5 className="mb-3">Form Fields ({selectedForm.fields.length}):</h5>
              
              <div className="d-flex flex-column gap-2">
                {selectedForm.fields.map((field) => (
                  <div 
                    key={field.id} 
                    className="p-3 border rounded bg-light d-flex align-items-center"
                  >
                    <div className="me-auto">
                      <strong>{field.label}</strong>
                      <span className="text-muted ms-2">({field.type})</span>
                    </div>
                    {field.required && <Badge bg="primary">Required</Badge>}
                  </div>
                ))}
              </div>
            </div>
          ) : (
            <div>
              <Form.Group className="mb-3">
                <Form.Label>Form Name</Form.Label>
                <Form.Control
                  type="text"
                  value={formData.name}
                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                  placeholder="Enter form name"
                />
              </Form.Group>
              
              <Form.Group className="mb-4">
                <Form.Label>Description</Form.Label>
                <Form.Control
                  type="text"
                  value={formData.description}
                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                  placeholder="Enter form description"
                />
              </Form.Group>

              <div className="mb-3 d-flex justify-content-between align-items-center">
                <h5 className="mb-0">Form Fields</h5>
                <Button
                  variant="outline-secondary"
                  size="sm"
                  onClick={handleCreateForm}
                >
                  <FaPlus className="me-1" /> Add Field
                </Button>
              </div>

              {formData.fields.length === 0 ? (
                <div className="text-center py-4">
                  <p className="text-muted mb-3">No fields added yet</p>
                  <Button
                    variant="primary"
                    onClick={handleCreateForm}
                  >
                    <FaPlus className="me-2" /> Add Your First Field
                  </Button>
                </div>
              ) : (
                <div className="d-flex flex-column gap-3">
                  {formData.fields.map((field, index) => (
                    <Card key={field.id} className="border">
                      <Card.Body>
                        <Row className="align-items-center">
                          <Col>
                            <Form.Group>
                              <Form.Label>Field Label</Form.Label>
                              <Form.Control
                                type="text"
                                value={field.label}
                                onChange={(e) => {
                                  const updatedFields = [...formData.fields];
                                  updatedFields[index].label = e.target.value;
                                  setFormData({ ...formData, fields: updatedFields });
                                }}
                                placeholder="Enter field label"
                              />
                            </Form.Group>
                          </Col>
                          <Col>
                            <Form.Group>
                              <Form.Label>Field Type</Form.Label>
                              <Form.Select
                                value={field.type}
                                onChange={(e) => {
                                  const updatedFields = [...formData.fields];
                                  updatedFields[index].type = e.target.value as any;
                                  setFormData({ ...formData, fields: updatedFields });
                                }}
                              >
                                <option value="text">Text</option>
                                <option value="number">Number</option>
                                <option value="email">Email</option>
                                <option value="date">Date</option>
                                <option value="select">Select</option>
                                <option value="textarea">Textarea</option>
                                <option value="checkbox">Checkbox</option>
                                <option value="radio">Radio</option>
                              </Form.Select>
                            </Form.Group>
                          </Col>
                          <Col xs="auto">
                            <Button variant="outline-danger" size="sm">
                              <FaTrash />
                            </Button>
                          </Col>
                        </Row>
                      </Card.Body>
                    </Card>
                  ))}
                </div>
              )}
            </div>
          )}
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowModal(false)}>
            Cancel
          </Button>
          {modalType !== 'view' && (
            <Button variant="primary" onClick={() => setShowModal(false)}>
              {modalType === 'create' ? 'Create Form' : 'Save Changes'}
            </Button>
          )}
        </Modal.Footer>
      </Modal>
    </Container>
  );
}

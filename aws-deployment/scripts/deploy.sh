#!/bin/bash

# CHWOne AWS Deployment Script
# This script automates the deployment of CHWOne platform to AWS

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
STACK_NAME="ChwOneStack"
REGION=${AWS_REGION:-us-east-1}
PROFILE=${AWS_PROFILE:-default}

echo -e "${BLUE}üöÄ CHWOne AWS Deployment Script${NC}"
echo -e "${BLUE}=================================${NC}"

# Function to check if AWS CLI is configured
check_aws_config() {
    echo -e "${YELLOW}Checking AWS configuration...${NC}"

    if ! aws sts get-caller-identity --profile $PROFILE &> /dev/null; then
        echo -e "${RED}‚ùå AWS CLI is not configured or credentials are invalid${NC}"
        echo -e "${YELLOW}Please run: aws configure --profile $PROFILE${NC}"
        exit 1
    fi

    echo -e "${GREEN}‚úÖ AWS CLI is configured${NC}"
}

# Function to check if CDK is installed
check_cdk() {
    echo -e "${YELLOW}Checking AWS CDK installation...${NC}"

    if ! command -v cdk &> /dev/null; then
        echo -e "${RED}‚ùå AWS CDK is not installed${NC}"
        echo -e "${YELLOW}Please install CDK: npm install -g aws-cdk${NC}"
        exit 1
    fi

    echo -e "${GREEN}‚úÖ AWS CDK is installed${NC}"
}

# Function to check Node.js and npm
check_node() {
    echo -e "${YELLOW}Checking Node.js and npm...${NC}"

    if ! command -v node &> /dev/null || ! command -v npm &> /dev/null; then
        echo -e "${RED}‚ùå Node.js or npm is not installed${NC}"
        exit 1
    fi

    echo -e "${GREEN}‚úÖ Node.js and npm are installed${NC}"
}

# Function to install dependencies
install_dependencies() {
    echo -e "${YELLOW}Installing CDK dependencies...${NC}"

    cd aws-deployment/cdk
    npm install
    cd ../..

    echo -e "${GREEN}‚úÖ Dependencies installed${NC}"
}

# Function to bootstrap CDK (first time only)
bootstrap_cdk() {
    echo -e "${YELLOW}Bootstrapping CDK environment...${NC}"

    cd aws-deployment/cdk
    cdk bootstrap --profile $PROFILE
    cd ../..

    echo -e "${GREEN}‚úÖ CDK environment bootstrapped${NC}"
}

# Function to deploy CDK stack
deploy_cdk() {
    echo -e "${YELLOW}Deploying CDK stack...${NC}"

    cd aws-deployment/cdk
    cdk deploy $STACK_NAME --profile $PROFILE --require-approval never
    cd ../..

    echo -e "${GREEN}‚úÖ CDK stack deployed${NC}"
}

# Function to build Next.js application
build_app() {
    echo -e "${YELLOW}Building Next.js application...${NC}"

    npm run build

    echo -e "${GREEN}‚úÖ Application built${NC}"
}

# Function to configure Amplify
configure_amplify() {
    echo -e "${YELLOW}Configuring AWS Amplify...${NC}"

    # Get stack outputs
    USER_POOL_ID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --profile $PROFILE --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' --output text)
    USER_POOL_CLIENT_ID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --profile $PROFILE --query 'Stacks[0].Outputs[?OutputKey==`UserPoolClientId`].OutputValue' --output text)
    IDENTITY_POOL_ID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --profile $PROFILE --query 'Stacks[0].Outputs[?OutputKey==`IdentityPoolId`].OutputValue' --output text)
    API_URL=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --profile $PROFILE --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' --output text)
    S3_BUCKET=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --profile $PROFILE --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' --output text)

    # Create .env.local with AWS configuration
    cat > .env.local << EOF
# AWS Configuration (Generated by deployment script)
NEXT_PUBLIC_AWS_REGION=$REGION
NEXT_PUBLIC_USER_POOL_ID=$USER_POOL_ID
NEXT_PUBLIC_USER_POOL_CLIENT_ID=$USER_POOL_CLIENT_ID
NEXT_PUBLIC_IDENTITY_POOL_ID=$IDENTITY_POOL_ID
NEXT_PUBLIC_API_ENDPOINT=$API_URL
NEXT_PUBLIC_S3_BUCKET=$S3_BUCKET

# AWS Credentials (Configure these manually)
NEXT_PUBLIC_AWS_ACCESS_KEY_ID=your-access-key-id
AWS_SECRET_ACCESS_KEY=your-secret-access-key
EOF

    echo -e "${GREEN}‚úÖ Amplify configuration created${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Please update AWS credentials in .env.local${NC}"
}

# Function to initialize database
initialize_database() {
    echo -e "${YELLOW}Initializing database...${NC}"

    # This would run database initialization scripts
    # For now, just create some sample data

    echo -e "${GREEN}‚úÖ Database initialized${NC}"
}

# Function to run health checks
health_check() {
    echo -e "${YELLOW}Running health checks...${NC}"

    # Check if services are accessible
    if aws cognito-idp describe-user-pool --user-pool-id $USER_POOL_ID --profile $PROFILE &> /dev/null; then
        echo -e "${GREEN}‚úÖ Cognito User Pool is accessible${NC}"
    else
        echo -e "${RED}‚ùå Cognito User Pool is not accessible${NC}"
    fi

    if aws s3 ls s3://$S3_BUCKET --profile $PROFILE &> /dev/null; then
        echo -e "${GREEN}‚úÖ S3 Bucket is accessible${NC}"
    else
        echo -e "${RED}‚ùå S3 Bucket is not accessible${NC}"
    fi

    echo -e "${GREEN}‚úÖ Health checks completed${NC}"
}

# Main deployment function
main() {
    echo -e "${BLUE}Starting CHWOne deployment...${NC}"

    # Pre-deployment checks
    check_aws_config
    check_cdk
    check_node

    # Install dependencies
    install_dependencies

    # Ask if this is first deployment
    echo -e "${YELLOW}Is this your first deployment? (y/n)${NC}"
    read -r first_deployment

    if [[ $first_deployment =~ ^[Yy]$ ]]; then
        bootstrap_cdk
    fi

    # Deploy infrastructure
    deploy_cdk

    # Build application
    build_app

    # Configure environment
    configure_amplify

    # Initialize database
    initialize_database

    # Run health checks
    health_check

    echo -e "${GREEN}üéâ Deployment completed successfully!${NC}"
    echo -e "${BLUE}Next steps:${NC}"
    echo -e "1. Update AWS credentials in .env.local"
    echo -e "2. Connect your GitHub repository to Amplify"
    echo -e "3. Configure custom domain (optional)"
    echo -e "4. Test the application"
    echo -e ""
    echo -e "${BLUE}Application URLs:${NC}"
    echo -e "‚Ä¢ Amplify Console: https://$REGION.console.aws.amazon.com/amplify/home"
    echo -e "‚Ä¢ Cognito Console: https://$REGION.console.aws.amazon.com/cognito/home"
    echo -e "‚Ä¢ DynamoDB Console: https://$REGION.console.aws.amazon.com/dynamodb/home"
    echo -e "‚Ä¢ S3 Console: https://$REGION.console.aws.amazon.com/s3/home"
}

# Function to show usage
usage() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -h, --help          Show this help message"
    echo "  -p, --profile       AWS profile to use (default: default)"
    echo "  -r, --region        AWS region to deploy to (default: us-east-1)"
    echo "  --bootstrap-only    Only run CDK bootstrap"
    echo "  --deploy-only       Only run CDK deployment"
    echo "  --build-only        Only build the application"
    echo ""
    echo "Examples:"
    echo "  $0                          # Full deployment"
    echo "  $0 --profile myprofile      # Use specific AWS profile"
    echo "  $0 --bootstrap-only         # Only bootstrap CDK"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            exit 0
            ;;
        -p|--profile)
            PROFILE="$2"
            shift 2
            ;;
        -r|--region)
            REGION="$2"
            shift 2
            ;;
        --bootstrap-only)
            bootstrap_cdk
            exit 0
            ;;
        --deploy-only)
            check_aws_config
            check_cdk
            install_dependencies
            deploy_cdk
            exit 0
            ;;
        --build-only)
            build_app
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

# Run main deployment
main

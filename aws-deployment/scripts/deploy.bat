@echo off
REM CHWOne AWS Deployment Script (Windows)
REM This script automates the deployment of CHWOne platform to AWS

setlocal enabledelayedexpansion

REM Colors for Windows CMD
set "RED=[91m"
set "GREEN=[92m"
set "YELLOW=[93m"
set "BLUE=[94m"
set "NC=[0m"

REM Configuration
set "STACK_NAME=ChwOneStack"
set "REGION=%AWS_REGION%"
if "%REGION%"=="" set "REGION=us-east-1"
set "PROFILE=%AWS_PROFILE%"
if "%PROFILE%"=="" set "PROFILE=default"

echo %BLUE%üöÄ CHWOne AWS Deployment Script%NC%
echo %BLUE%=================================%NC%

REM Function to check AWS CLI
:check_aws_config
echo %YELLOW%Checking AWS configuration...%NC%
aws sts get-caller-identity --profile %PROFILE% >nul 2>&1
if %errorlevel% neq 0 (
    echo %RED%‚ùå AWS CLI is not configured or credentials are invalid%NC%
    echo %YELLOW%Please run: aws configure --profile %PROFILE%%NC%
    exit /b 1
)
echo %GREEN%‚úÖ AWS CLI is configured%NC%
goto :eof

REM Function to check CDK
:check_cdk
echo %YELLOW%Checking AWS CDK installation...%NC%
cdk --version >nul 2>&1
if %errorlevel% neq 0 (
    echo %RED%‚ùå AWS CDK is not installed%NC%
    echo %YELLOW%Please install CDK: npm install -g aws-cdk%NC%
    exit /b 1
)
echo %GREEN%‚úÖ AWS CDK is installed%NC%
goto :eof

REM Function to check Node.js
:check_node
echo %YELLOW%Checking Node.js and npm...%NC%
node --version >nul 2>&1
if %errorlevel% neq 0 (
    echo %RED%‚ùå Node.js is not installed%NC%
    exit /b 1
)
npm --version >nul 2>&1
if %errorlevel% neq 0 (
    echo %RED%‚ùå npm is not installed%NC%
    exit /b 1
)
echo %GREEN%‚úÖ Node.js and npm are installed%NC%
goto :eof

REM Function to install dependencies
:install_dependencies
echo %YELLOW%Installing CDK dependencies...%NC%
cd aws-deployment\cdk
call npm install
cd ..\..
echo %GREEN%‚úÖ Dependencies installed%NC%
goto :eof

REM Function to bootstrap CDK
:bootstrap_cdk
echo %YELLOW%Bootstrapping CDK environment...%NC%
cd aws-deployment\cdk
call cdk bootstrap --profile %PROFILE%
cd ..\..
echo %GREEN%‚úÖ CDK environment bootstrapped%NC%
goto :eof

REM Function to deploy CDK
:deploy_cdk
echo %YELLOW%Deploying CDK stack...%NC%
cd aws-deployment\cdk
call cdk deploy %STACK_NAME% --profile %PROFILE% --require-approval never
cd ..\..
echo %GREEN%‚úÖ CDK stack deployed%NC%
goto :eof

REM Function to build app
:build_app
echo %YELLOW%Building Next.js application...%NC%
call npm run build
echo %GREEN%‚úÖ Application built%NC%
goto :eof

REM Function to configure Amplify
:configure_amplify
echo %YELLOW%Configuring AWS Amplify...%NC%

REM Get stack outputs
for /f "tokens=*" %%i in ('aws cloudformation describe-stacks --stack-name %STACK_NAME% --profile %PROFILE% --query "Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue" --output text') do set "USER_POOL_ID=%%i"
for /f "tokens=*" %%i in ('aws cloudformation describe-stacks --stack-name %STACK_NAME% --profile %PROFILE% --query "Stacks[0].Outputs[?OutputKey==`UserPoolClientId`].OutputValue" --output text') do set "USER_POOL_CLIENT_ID=%%i"
for /f "tokens=*" %%i in ('aws cloudformation describe-stacks --stack-name %STACK_NAME% --profile %PROFILE% --query "Stacks[0].Outputs[?OutputKey==`IdentityPoolId`].OutputValue" --output text') do set "IDENTITY_POOL_ID=%%i"
for /f "tokens=*" %%i in ('aws cloudformation describe-stacks --stack-name %STACK_NAME% --profile %PROFILE% --query "Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue" --output text') do set "API_URL=%%i"
for /f "tokens=*" %%i in ('aws cloudformation describe-stacks --stack-name %STACK_NAME% --profile %PROFILE% --query "Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue" --output text') do set "S3_BUCKET=%%i"

REM Create .env.local
echo # AWS Configuration (Generated by deployment script) > .env.local
echo NEXT_PUBLIC_AWS_REGION=%REGION% >> .env.local
echo NEXT_PUBLIC_USER_POOL_ID=%USER_POOL_ID% >> .env.local
echo NEXT_PUBLIC_USER_POOL_CLIENT_ID=%USER_POOL_CLIENT_ID% >> .env.local
echo NEXT_PUBLIC_IDENTITY_POOL_ID=%IDENTITY_POOL_ID% >> .env.local
echo NEXT_PUBLIC_API_ENDPOINT=%API_URL% >> .env.local
echo NEXT_PUBLIC_S3_BUCKET=%S3_BUCKET% >> .env.local
echo. >> .env.local
echo # AWS Credentials (Configure these manually) >> .env.local
echo NEXT_PUBLIC_AWS_ACCESS_KEY_ID=your-access-key-id >> .env.local
echo AWS_SECRET_ACCESS_KEY=your-secret-access-key >> .env.local

echo %GREEN%‚úÖ Amplify configuration created%NC%
echo %YELLOW%‚ö†Ô∏è  Please update AWS credentials in .env.local%NC%
goto :eof

REM Main deployment function
:main
echo %BLUE%Starting CHWOne deployment...%NC%

call :check_aws_config
call :check_cdk
call :check_node

call :install_dependencies

set /p "first_deployment=Is this your first deployment? (y/n): "
if /i "%first_deployment%"=="y" (
    call :bootstrap_cdk
)

call :deploy_cdk
call :build_app
call :configure_amplify

echo %GREEN%üéâ Deployment completed successfully!%NC%
echo %BLUE%Next steps:%NC%
echo 1. Update AWS credentials in .env.local
echo 2. Connect your GitHub repository to Amplify
echo 3. Configure custom domain (optional)
echo 4. Test the application
echo.
echo %BLUE%Application URLs:%NC%
echo ‚Ä¢ Amplify Console: https://%REGION%.console.aws.amazon.com/amplify/home
echo ‚Ä¢ Cognito Console: https://%REGION%.console.aws.amazon.com/cognito/home
echo ‚Ä¢ DynamoDB Console: https://%REGION%.console.aws.amazon.com/dynamodb/home
echo ‚Ä¢ S3 Console: https://%REGION%.console.aws.amazon.com/s3/home
goto :eof

REM Parse command line arguments
if "%1"=="-h" goto :usage
if "%1"=="--help" goto :usage
if "%1"=="-p" (
    set "PROFILE=%2"
    shift & shift
)
if "%1"=="--profile" (
    set "PROFILE=%2"
    shift & shift
)
if "%1"=="-r" (
    set "REGION=%2"
    shift & shift
)
if "%1"=="--region" (
    set "REGION=%2"
    shift & shift
)
if "%1"=="--bootstrap-only" (
    call :bootstrap_cdk
    goto :eof
)
if "%1"=="--deploy-only" (
    call :check_aws_config
    call :check_cdk
    call :install_dependencies
    call :deploy_cdk
    goto :eof
)
if "%1"=="--build-only" (
    call :build_app
    goto :eof
)

call :main
goto :eof

:usage
echo Usage: %0 [OPTIONS]
echo.
echo Options:
echo   -h, --help          Show this help message
echo   -p, --profile       AWS profile to use (default: default)
echo   -r, --region        AWS region to deploy to (default: us-east-1)
echo   --bootstrap-only    Only run CDK bootstrap
echo   --deploy-only       Only run CDK deployment
echo   --build-only        Only build the application
echo.
echo Examples:
echo   %0                          # Full deployment
echo   %0 --profile myprofile      # Use specific AWS profile
echo   %0 --bootstrap-only         # Only bootstrap CDK
goto :eof
